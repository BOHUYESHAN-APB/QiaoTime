# Project gradle properties for android-poc
# JVM settings for Gradle daemon
org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8 \
	--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED

# Kotlin and Android build cache
kotlin.code.style=official
android.useAndroidX=true

# Use offline mirror ordering hints (Android Studio still controls actual mirror configuration)
# Proxy settings: configure only if you use an HTTP/HTTPS proxy. Empty values are removed to avoid warnings.
# systemProp.http.proxyHost=your.proxy.host
# systemProp.http.proxyPort=3128
# systemProp.https.proxyHost=your.proxy.host
# systemProp.https.proxyPort=3128

# Suppress AGP warning for using newer compileSdk (set to the compileSdk you use)
android.suppressUnsupportedCompileSdk=36

# Increase parallel workers when CI/local machine has multiple cores
org.gradle.workers.max=4

# KAPT/JDK module compatibility (when using JDK 17+): export internal javac packages to the kapt process
# This helps avoid IllegalAccessError: superclass access check failed for com.sun.tools.javac.*
# Keep encoding and memory for kapt and expose javac internals used by kapt
kapt.jvmargs=-Dfile.encoding=UTF-8 \
	--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
	-Xmx1g
# Use the legacy kapt worker API when new worker isolation causes module access issues
kapt.use.worker.api=false

# Ensure Kotlin compiler runs with JVM args that expose javac internals when using JDK 17+
# This helps KAPT/kotlin-daemon access com.sun.tools.javac.* when needed.
kotlin.daemon.jvmargs=-Dfile.encoding=UTF-8 \
	--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \
	--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \
	--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
	-Xmx1g

# Fallback: run Kotlin compiler in-process so it inherits org.gradle.jvmargs above.
# Options: 'daemon' (default) or 'in-process'. Use 'in-process' to avoid separate kotlin-daemon process/module isolation.
kotlin.compiler.execution.strategy=in-process
